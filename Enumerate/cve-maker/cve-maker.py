#!/usr/bin/env python3

__description__ = 'Tool to find CVEs, Exploits and Vulnerable Targets.'
__author__ = 'msd0pe'
__version__ = '2.4.2'
__date__ = '2022/07/25'

"""
https://github.com/msd0pe-1
Source code put in public domain by msd0pe, no Copyright
Any malicious or illegal activity may be punishable by law
Use at your own risk
"""

"""
CHANGELOG:
        2023/01/22 : V2.4.3 - Fixing Bugs. Removing detect and remote options.
        2022/07/25 : V2.4.2 - Code optimizations.
        2021/09/20 : V2.4.1 - CVE-MAKER is now working on ArchLinux + VI editor available.
        2021/09/14 : V2.4 - Optimizing the code + adding last criticals CVE option + adding the shodan option. 
        2020/08/02 : V2.3 - Optimizing the code + download an exploit without execution is now possible.
        2020/02/22 : V2.2 - Customize your exploit + fix bug.
	2019/12/30 : V2.1 - Sending a remote exploit is now automated + auto detecting the compilation / usage options.
	2019/09/14 : V2.0 - Remote exploitation is now possible.
	2019/08/03 : V1.3.2 - Upgrading to Python 3.7, optimizing Detect option & detecting payloads languages.
	2019/07/05 : V1.3.1 - Optimization of the Search and Detect options.
	2019/06/28 : V1.3 - Adding the Searching option.
	2019/06/28 : V1.2 - Adding the EDB Check option.
	2019/06/25 : V1.1 - Adding the Detection option.
	2019/06/23 : V1.0 - Project Start.
"""

class bcolors:
    PURPLE = '\033[95m'
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    OCRA = '\033[93m'
    RED = '\033[91m'
    CYAN = '\033[96m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

class infos:
    INFO = "[" + bcolors.OCRA + bcolors.BOLD + "?" + bcolors.ENDC + bcolors.ENDC + "] "
    ERROR = "[" + bcolors.RED + bcolors.BOLD + "X" + bcolors.ENDC + bcolors.ENDC + "] "
    GOOD = "[" + bcolors.GREEN + bcolors.BOLD + "+" + bcolors.ENDC + bcolors.ENDC + "] "
    PROCESS = "[" + bcolors.BLUE + bcolors.BOLD + "*" + bcolors.ENDC + bcolors.ENDC + "] "

try:
    import optparse
    from functions import last as last
    from functions import info as info
    from functions import detect as detect
    from functions import shodan as shodan
    from functions import payloads as payloads

except ImportError:
    print("\n" + infos.ERROR + "Error. Have you installed the requirements properly?")
    print(infos.INFO + "Be sure to run the script as follows:")
    print(infos.INFO + "python3 cve-maker.py ....")
    print(infos.INFO + "./cve-maker.py ....\n")

def Main():
    Menu = optparse.OptionParser(usage='python %prog [options]', version='%prog ' + __version__)
    Menu.add_option('-f', '--find', type="str", dest="find", help='looking for an exploit by its vulnerable software')
    Menu.add_option('-c', '--cve', type="str", dest="cve", help='looks for the CVE from its name')
    Menu.add_option('-e', '--edb', type="str", dest="edb", help='looks for the CVE from its EDB-ID')
    Menu.add_option('--critical', action="store_true", dest="critical", help='show the last criticals vulnerabilities')
    Menu.add_option('--shodan', action="store_true", dest="shodan", help='search targets from a given CVE')
    (options, args) = Menu.parse_args()


    Examples = optparse.OptionGroup(Menu, "Examples", """python cve-maker.py -f "Log4j"
                                                         python cve-maker.py -c CVE-2021-44228
                                                         python cve-maker.py -e 50592
                                                         python cve-maker.py -c 2019-98765 --shodan
                                                         python cve-maker.py -f "php 8.1.0" --shodan
                                                         python cve-maker.py --critical""")
    Menu.add_option_group(Examples)

    if len(args) != 0 or options == {'find': None, 'cve': None, 'edb': None, 'critical': None, 'shodan': None}:
        Menu.print_help()
        print('')
        print('  %s' % __description__)
        print('  Source code put in public domain by ' + bcolors.PURPLE + bcolors.BOLD + 'msd0pe' + bcolors.ENDC + bcolors.ENDC + ',' + bcolors.RED + bcolors.BOLD + 'no Copyright' + bcolors.ENDC + bcolors.ENDC)
        print('  Any malicious or illegal activity may be punishable by law')
        print('  Use at your own risk')

    elif len(args) == 0:
        try:
            if options.cve != None and options.edb != None:
                print()
                print(infos.ERROR + "CVE and EDB arguments can't be specified at the same time.")
                print()
                exit(0)

            if options.critical == True:
                last.GetLastCritical()
                exit(0)

            if options.shodan == True:
                print()
                try:
                    with open("shodan_api.key", "r") as api_file:
                        api_key = api_file.read()
                except:
                    print()
                    api_key = input(infos.INFO + "Enter your shodan api key : " + bcolors.ENDC + bcolors.ENDC)
                    with open("shodan_api.key", "w") as api_file:
                        api_file.write(api_key)

                if options.edb != None or options.cve != None or options.find != None:
                    if options.find != None:
                        shodan.Shodan(api_key, options.find, "", "", options.find)
                        exit(0)
                    shodan.ProductVersionIdentify(options.cve,options.edb)
                    shodan.Shodan(api_key, shodan.vendors_versions, shodan.products_versions, shodan.cve_shodan, options.find)
                    exit(0)
                else:
                    print("\n" + infos.ERROR + "You must specify a CVE/EDB ID or a Product/Vendor !\n")
                    exit(0)

            if options.find != None:
                last.GetLast(options.find)
                detect.SearchExploit(options.find)

            else:
                if options.edb != None or options.cve != None:
                    last.GetDescription(options.cve, options.edb)
                payloads.CreateDirectory()
                payloads.FindCVE(options.cve, options.edb)

        except NameError as e:
            print(e)
            if options.edb == None or options.cve == None:
                print("\n" + infos.ERROR + "You must specify a CVE-NAME or a EDB-ID !\n")
            else:
                 pass

    else:
        Menu.print_help()
        print('')
        print('  %s' % __description__)
        print('  Source code put in public domain by ' + bcolors.PURPLE + bcolors.BOLD + 'msd0pe' + bcolors.ENDC + bcolors.ENDC + ',' + bcolors.RED + bcolors.BOLD + 'no Copyright' + bcolors.ENDC + bcolors.ENDC)
        print('  Any malicious or illegal activity may be punishable by law')
        print('  Use at your own risk')

if __name__ == '__main__':
    try:
        Main()

    except KeyboardInterrupt:
        print()
        print(infos.PROCESS + "Exiting...")
        print()
        exit(1)
